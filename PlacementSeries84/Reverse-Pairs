//Brute-Force
class Solution {
    public int reversePairs(int[] nums) {
        int count = 0;
        for(int i=0; i<nums.length; i++){
            for(int j=i+1; j<nums.length; j++){
                if(nums[i]>(2*nums[j])){
                    count++;
                }
            }
        }
        return count;
    }
}

//Optimized (Merge Sort)
class Solution {
    public int reversePairs(int[] nums) {
        return mergeSort(nums, 0, nums.length -1);
    }

    public static int mergeSort(int[] nums, int low, int high){
        if(low>=high){
            return 0;
        }
        int mid = (low+high)/2;
        int count = mergeSort(nums, low, mid);
        count+= mergeSort(nums,mid+1, high);
        count+= countPairs(nums, low, mid, high);
        merge(nums, low, mid, high);
        return count;
    }

    public static int countPairs(int[] nums, int low, int mid, int high){
        int count = 0;
        int right = mid+1;
        for(int i=low; i<=mid; i++){
            while(right<=high && nums[i]>2*(long)nums[right]){
                right++;
            }
            count += (right-(mid+1));
        }
        return count;
    }

    public static void merge(int[] nums, int low, int mid, int high){
        int l = low;
        int r = mid+1;
        int k = 0;
        int[] temp = new int[high-low+1];
        while(l<=mid && r<=high){
            if(nums[l]<=nums[r]){
                temp[k++] = nums[l++];
            }
            else{
                temp[k++] = nums[r++];
            }
        }
        while(l<=mid){
            temp[k++] = nums[l++];
        }
        while(r<=high){
            temp[k++] = nums[r++];
        }
        for(int i=0; i<temp.length; i++){
            nums[low+i] = temp[i];
        }
    }
}
